{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	



	//header files
	"bits ankush": {
		"prefix": "hbits",
		"body": [
		  "#include <bits/stdc++.h>",
		  "$1"
		],
		"description": "bits ankush"
	},
	"iostream": {
		"prefix": "hiostream",
		"body": [
		"#include <iostream>",
		"$1"
		],
		"description": "iostream"
	},
	"vector header": {
		"prefix": "hvector",
		"body": [
		  "#include <vector>",
		  "$1"
		],
		"description": "vector header"
	},
	"queue header": {
		"prefix": "hqueue",
		"body": [
		  "#include <queue>",
		  "$1"
		],
		"description": "queue header"
	},
	"stack header": {
		"prefix": "hstack",
		"body": [
		  "#include <stack>",
		  "$1"
		],
		"description": "stack header"
	},
	"set header": {
		"prefix": "hset",
		"body": [
		  "#include <set> ",
		  "$1"
		],
		"description": "set header"
	},
	"unordered set header": {
		"prefix": "huoset",
		"body": [
		  "#include <unordered_set>",
		  "$1"
		],
		"description": "unordered set header"
	},
	"map header": {
		"prefix": "hmap",
		"body": [
		  "#include <map> ",
		  "$1"
		],
		"description": "map header"
	}, 
	"unordered map header": {
		"prefix": "huomap",
		"body": [
		  "#include <unordered_map>",
		  "$1"
		],
		"description": "unordered map header"
	},
	"priority queue header": {
		"prefix": "hpqueue",
		"body": [
		  "#include <priority_queue>",
		  "$1"
		],
		"description": "priority queue header"
	},
	"dqueue header": {
		"prefix": "hdqueue",
		"body": [
		  "#include <deque>",
		  "$1"
		],
		"description": "dqueue header"
	},
	"algorithm header": {
		"prefix": "halgo",
		"body": [
			"#include <algorithm>",
			"$1"
		],
		"description": "algorithm header"
	},
	"string header": {
	"prefix": "hstring",
	"body": [
		"#include <string>",
		"$1"
	],
	"description": "string header"
	},











	//input and output
	"cout statement": {
		"prefix": "outst",
		"body": [
		  "cout<< $1 <<endl;",
		  "$2"
		],
		"description": "cout statement"
	  },
	"cin statement": {
	"prefix": "inst",
	"body": [
		"cin>> $1 ;",
		"$2"
	],
	"description": "cin statement"
	},
	"array input statement": {
		"prefix": "arrin",
		"body": [
		  "for(int i=0; i<n ; i++){",
		  "  cin>>${1:arr}[i];",
		  "}",
		  "$2"
		],
		"description": "array input statement"
	},
	"array output statement": {
		"prefix": "arrout",
		"body": [
		  "for(int i=0; i<n ; i++){",
		  "  cout<<${1:arr}[i]<<\" \";",
		  "}",
		  "$2"
		],
		"description": "array output statement"
	},
	"array input output statement": {
		"prefix": "arrinout",
		"body": [
		  "for(int i=0; i<n ; i++){",
		  "  cin>>${1:arr}[i];",
		  "}",
		  "for(int i=0; i<n ; i++){",
		  "  cout<<${3:arr}[i]<<\" \";",
		  "}",
		  "$4"
		],
		"description": "array input output statement"
	},
	"array char input output statement": {
		"prefix": "arrchinout",
		"body": [
		  "char ${1:ch}[n];",
		  "for(int i=0; i<n ; i++){",
		  "  cin>>${2:ch}[i];",
		  "}",
		  "for(int i=0; i<n ; i++){",
		  "  cout<<${3:ch}[i]<<\" \";",
		  "}",
		  "$4"
		],
		"description": "array char input output statement"
	},
	"array int input output statement": {
		"prefix": "arrintinout",
		"body": [
		  "int ${1:arr}[n];",
		  "for(int i=0; i<n ; i++){",
		  "  cin>>${2:arr}[i];",
		  "}",
		  "for(int i=0; i<n ; i++){",
		  "  cout<<${3:arr}[i]<<\" \";",
		  "}",
		  "$4"
		],
		"description": "array int input output statement"
	},






	//aggregate functions
	"max of 2 num statement": {
		"prefix": "max2",
		"body": [
		  "max( $1 , $2 )"
		],
		"description": "max of 2 num statement"
	},
	"max of 3 ": {
		"prefix": "max3",
		"body": [
		  "max(max( ${1:#1} , ${2:#2} ), ${3:#3} )"
		],
		"description": "max of 3 "
	},
	"max of 4": {
		"prefix": "max4",
		"body": [
		  "max(max(max( ${1:#1} , ${2:#2} ), ${3:#3} ), ${4:#4} )"
		],
		"description": "max of 4"
	},
	"max of 5": {
		"prefix": "max5",
		"body": [
		  "max(max(max(max( ${1:#1} , ${2:#2} ), ${3:#3} ), ${4:#4} ), ${5:#5} )"
		],
		"description": "max of 5"
	},
	"sum of 2 numbers": {
		"prefix": "sum2",
		"body": [
		  "( ${1:#1} + ${2:#2} )"
		],
		"description": "sum of 2 numbers"
	},
	"sum of 3 numbers": {
		"prefix": "sum3",
		"body": [
		  "( ${1:#1} + ${2:#2} + ${3:#3} )"
		],
		"description": "sum of 3 numbers"
	},
	"sum of 4 numbers": {
		"prefix": "sum4",
		"body": [
		  "( ${1:#1} + ${2:#2} + ${3:#3} + ${4:#4} )"
		],
		"description": "sum of 4 numbers"
	},
	"sum of 5 numbers": {
		"prefix": "sum5",
		"body": [
		  "( ${1:#1} + ${2:#2} + ${3:#3} + ${4:#4} + ${5:#5} )"
		],
		"description": "sum of 5 numbers"
	},
	"sqrt statement": {
	"prefix": "sqrtst",
	"body": [
		"sqrt( $1 )$2"
	],
	"description": "sqrt statement"
	},
	"log to base e (x) statement": {
	"prefix": "logest",
	"body": [
		"log( $1 )$2"
	],
	"description": "log to base e (x) statement"
	},
	"log to base 10 (x) statement": {
	"prefix": "logtenst",
	"body": [
		"log10( $1 )$2"
	],
	"description": "log to base 10 (x) statement"
	},
	"log to base 2 (x) statement": {
	"prefix": "logtwost",
	"body": [
		"log2( $1 )$2"
	],
	"description": "log to base 2 (x) statement"
	},
	"sin(x) statement": {
	"prefix": "sinst",
	"body": [
		"sin( $1 )$2"
	],
	"description": "sin(x) statement"
	},
	"cos(x) statement": {
	"prefix": "cosst",
	"body": [
		"cos( $1 )$2"
	],
	"description": "cos(x) statement"
	},
	"tan(x) statement": {
	"prefix": "tanst",
	"body": [
		"tan( $1 )$2"
	],
	"description": "tan(x) statement"
	},
	"inverse sin(x) statement": {
	"prefix": "asinst",
	"body": [
		"asin( $1 )$2"
	],
	"description": "inverse sin(x) statement"
	},
	"inverse cos(x) statement": {
	"prefix": "acosst",
	"body": [
		"acos( $1 )$2"
	],
	"description": "inverse cos(x) statement"
	},
	"inverse tan(x) statement": {
	"prefix": "atanst",
	"body": [
		"atan( $1 )$2"
	],
	"description": "inverse tan(x) statement"
	},





	  //string functions
	"to upper statement": {
	"prefix": "toupst",
	"body": [
		"toupper($1)$2"
	],
	"description": "to upper statement"
	},
























	//LOOPS
    "for++ ankush": {
		"prefix": "for",
		"body": [
		  "for(int i=0; i<${1:n} ; i++){",
		  "  $2",
		  "}"
		],
		"description": "for++ ankush"
	  }, 
	"forr ankush": {
	"prefix": "forr",
	"body": [
		"for(int i=n; i>${1:0} ; i--){",
		"  $2",
		"}"
	],
	"description": "forr ankush"
	},
	"while ankush": {
	"prefix": "while",
	"body": [
		"while(${1}){",
		"  ",
		"}"
	],
	"description": "while ankush"
	},
	"do while loop": {
		"prefix": "dowhilest",
		"body": [
		  "do",
		  "{",
		  "    ${2:statement}",
		  "} while (${1:condition});"
		],
		"description": "do while loop"
	},




	
	











	//conditions statements
	"if statement": {
	"prefix": "ifst",
	"body": [
		"if( $1 ){",
		"  $2;",
		"}",
		"$3"
	],
	"description": "if statement"
	},
	"else statement": {
	"prefix": "elsest",
	"body": [
		"else{",
		"  $1;",
		"}",
		"$2"
	],
	"description": "else statement"
	},
	"if else statement": {
		"prefix": "ifelsest",
		"body": [
		  "if( $1 ){",
		  "  $2;",
		  "}",
		  "else{",
		  "  $3;",
		  "}",
		  "$4"
		],
		"description": "if else statement"
	},
	"if elseif else statement": {
	"prefix": "ifelifst",
	"body": [
		" if( $1 ){",
		"  $2;",
		"}",
		"else if( $3 ){",
		"  $4;",
		"}",
		"else{",
		"  $5;",
		"}",
		"$6"
	],
	"description": "if elseif else statement"
	},
	"else if statement": {
	"prefix": "elifst",
	"body": [
		"else if( ${1} ){",
		"    $2",
		"}",
		"$3"
	],
	"description": "else if statement"
	},
	"switch statement with 15 cases": {
		"prefix": "switch15",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "case ${22:#11}:",
		  "    ${23:statement};",
		  "    break;",
		  "case ${24:#12}:",
		  "    ${25:statement};",
		  "    break;",
		  "case ${26:#13}:",
		  "    ${27:statement};",
		  "    break;",
		  "case ${28:#14}:",
		  "    ${29:statement};",
		  "    break;",
		  "case ${30:#15}:",
		  "    ${31:statement};",
		  "    break;",
		  "default:",
		  "    ${32:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 15 cases"
	},
	"switch statement with 14 cases": {
		"prefix": "switch14",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "case ${22:#11}:",
		  "    ${23:statement};",
		  "    break;",
		  "case ${24:#12}:",
		  "    ${25:statement};",
		  "    break;",
		  "case ${26:#13}:",
		  "    ${27:statement};",
		  "    break;",
		  "case ${28:#14}:",
		  "    ${29:statement};",
		  "    break;",
		  "default:",
		  "    ${30:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 14 cases"
	},
	"switch statement with 13 cases": {
		"prefix": "switch13",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "case ${22:#11}:",
		  "    ${23:statement};",
		  "    break;",
		  "case ${24:#12}:",
		  "    ${25:statement};",
		  "    break;",
		  "case ${26:#13}:",
		  "    ${27:statement};",
		  "    break;",
		  "default:",
		  "    ${28:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 13 cases"
	},
	"switch statement with 12 cases": {
		"prefix": "switch12",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "case ${22:#11}:",
		  "    ${23:statement};",
		  "    break;",
		  "case ${24:#12}:",
		  "    ${25:statement};",
		  "    break;",
		  "default:",
		  "    ${26:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 12 cases"
	},
	"switch statement with 11 cases": {
		"prefix": "switch11",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "case ${22:#11}:",
		  "    ${23:statement};",
		  "    break;",
		  "default:",
		  "    ${24:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 11 cases"
	},
	"switch statement with 10 cases": {
		"prefix": "switch10",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "case ${20:#10}:",
		  "    ${21:statement};",
		  "    break;",
		  "default:",
		  "    ${22:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 10 cases"
	},
	"switch statement with 9 cases": {
		"prefix": "switch9",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "case ${18:#9}:",
		  "    ${19:statement};",
		  "    break;",
		  "default:",
		  "    ${20:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 9 cases"
	},
	"switch statement with 8 cases": {
		"prefix": "switch8",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement};",
		  "    break;",
		  "case ${16:#8}:",
		  "    ${17:statement};",
		  "    break;",
		  "default:",
		  "    ${18:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 8 cases"
	},
	"switch statement with 7 cases": {
		"prefix": "switch7",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement}",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement}",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement}",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement}",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement}",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement}",
		  "    break;",
		  "case ${14:#7}:",
		  "    ${15:statement}",
		  "    break;",
		  "default:",
		  "    ${16:statement}",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 7 cases"
	},
	"switch statement with 6 cases": {
		"prefix": "switch6",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "case ${12:#6}:",
		  "    ${13:statement};",
		  "    break;",
		  "default:",
		  "    ${14:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 6 cases"
	},
	"switch statement with 5 cases": {
		"prefix": "switch5",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "case ${10:#5}:",
		  "    ${11:statement};",
		  "    break;",
		  "default:",
		  "    ${12:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 5 cases"
	},	
	"switch statement with 4 cases": {
		"prefix": "switch4",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "case ${8:#4}:",
		  "    ${9:statement};",
		  "    break;",
		  "default:",
		  "    ${10:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 4 cases"
	},
	"switch statement with 3 cases": {
		"prefix": "switch3",
		"body": [
		  "int $1;",
		  "cin>>$1;",
		  "switch ($1)",
		  "{",
		  "case ${2:#1}:",
		  "    ${3:statement};",
		  "    break;",
		  "case ${4:#2}:",
		  "    ${5:statement};",
		  "    break;",
		  "case ${6:#3}:",
		  "    ${7:statement};",
		  "    break;",
		  "default:",
		  "    ${8:statement};",
		  "    break;",
		  "}"
		],
		"description": "switch statement with 3 cases"
	},










	//templates
	"cp template": {
		"prefix": "cp",
		"body": [
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "void solve();",
		  "",
		  "int main(){",
		  "    ${1}",
		  "    solve();",
		  "    return 0;",
		  "}",
		  "",
		  "void solve() {",
		  "",
		  "}"
		],
		"description": "cp template"
	},
	"standard template": {
	"prefix": "standard template",
	"body": [
		"#include <iostream>",
		"using namespace std;",
		"",
		"int main(){",
		"    int a,b,n;",
		"    cin>>a>>b;",
		"    $1",
		"    return 0;",
		"}"
	],
	"description": "standard template"
	}








}
